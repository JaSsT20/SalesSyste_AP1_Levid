@page "/c_products"
@inject ProductsBLL ProductsBLL
@inject NotificationService message

<div class="card-header">
    <h2>Consulta de productos</h2>
    <div class='row'>
        <div class='col-md-3'>
            <label>Fecha incial</label>
            <InputDate @bind-Value="InitialDate" class="form-control"></InputDate>
        </div>
        <div class='col-md-3'>
            <label>Fecha límite</label>
            <div class="finalDate">
                <InputDate @bind-Value="FinalDate" class="form-control"></InputDate>
                <button type="button" class="btn btn-outline-primary oi oi-reload" @onclick="ResetDate"></button>
            </div>
        </div>
    </div>
    <div class='row'>
        @* Filtro *@
        <div class='col-md-4'>
            <label>Filtro</label>
            <div class="filter-box">
                <InputSelect class="form-control" @bind-Value="option">
                    <option value=0>Sin filtro</option>
                    <option value=1>Producto ID</option>
                    <option value=2>Descripción</option>
                    <option value=3>Precio</option>
                    <option value=4>Existencia</option>
                </InputSelect>
                <button type="button" class="btn btn-outline-primary oi oi-reload" @onclick="RestartFilter"></button>
            </div>
        </div>
        <div class='col-md-6'>
        @* Criterio *@
            @if(option == 3 || option == 4)
            {
                <div class='row'>
                    <div class='col-md-4'>
                        <label>Valor Mínimo</label>
                        <InputText @bind-Value="Min" class="form-control"></InputText>
                    </div>
                    <div class='col-md-4'>
                        <label>Valor Máximo</label>
                        <div id="c_search">
                            <InputText @bind-Value="Max" class="form-control"></InputText>
                            <button type="button" class="btn btn-info oi oi-magnifying-glass" @onclick="Filter"></button>
                        </div>
                    </div>
                </div>
                
            }
            else
            {
                <label>Criterio</label>
                <div class="col-md-6">
                    <div class="input-group mb-3">
                        <input id="c_search" type="text" class="form-control" @bind="criterion" disabled="@activeCriterion"/>
                        <button type="button" class="btn btn-info oi oi-magnifying-glass" @onclick="Filter"></button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div class="card-body">
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Descripción</th>
                <th>Precio</th>
                <th>Existencia</th>
                <th>Fecha de entrada</th>
            </tr>
        </thead>

        <tbody>
            @foreach(var product in Results)
            {
                <tr>
                    <td>@product.ProductId</td>
                    <td>@product.Description</td>
                    <td class="price">$@product.Price</td>
                    <td>@product.Existence</td>
                    <td>@product.EntryDate.ToString("dd/MM/yyy")</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    public int option { get; set;}
    public List<Product> Results { get; set; } = new List<Product>();
    public bool activeCriterion {get {return option == 0;}}
    public string criterion {get; set;} = string.Empty;
    public DateTime InitialDate { get; set; }
    public DateTime FinalDate { get; set; }
    public string Min { get; set; } = string.Empty;
    public string Max { get; set; } = string.Empty;
    protected override void OnInitialized()
    {
        Results  = ProductsBLL.GetList(item => true);
        InitialDate = GetOldestProduct().EntryDate;
        FinalDate = GetYoungestProduct().EntryDate;
    }
    private void Filter()
    {
        
        switch (option)
        {
            case 0:
            {
                NoFilter();
                SearchByDateRange();
                break;
            }               
            case 1:
            {
                SearchById();
                break;
            }
            case 2:
            {
                SearchByDescription();
                break;
            }
            case 3:
            {
                SearchByPrice();
                break;
            }
            case 4:
            {
                SearchByExistence();
                break;
            }
        }
        if (Results.Any() == false)
            message.ShowNotification("Oops!","Parece que no se han encontrado resultados.", NotificationSeverity.Warning);
    }
    void SearchById()
    {
        int searchId = 0;
        if (int.TryParse(criterion, out searchId))
        {
            Results = ProductsBLL.GetList(item => item.ProductId == searchId 
            && item.EntryDate >= InitialDate && item.EntryDate <= FinalDate);
        }
        else
        {
            message.ShowNotification("Valor inválido","El criterio de busqueda debe ser un entero. EJ: 1", NotificationSeverity.Error);
            return;
        }
    }
    void NoFilter()
    {
        Results = ProductsBLL.GetList(item => true);
        criterion = string.Empty;
    }
    void SearchByDateRange()
    {
        if(Validate())
            Results = ProductsBLL.GetList(item => item.EntryDate >= InitialDate && item.EntryDate <= FinalDate);
    }
    void SearchByDescription()
    {
        if(Validate())
        {
            Results = ProductsBLL.GetList(item => item.Description.ToLower().Contains(criterion.ToLower())
            && item.EntryDate >= InitialDate && item.EntryDate <= FinalDate);
        }
    }
    void SearchByPrice()
    {
        float minPrice = 0, maxPrice = 0;
        if(!string.IsNullOrEmpty(Min) && string.IsNullOrEmpty(Max))
        {
            float.TryParse(Min, out minPrice);
            Max = "0";
            float.TryParse(Max, out maxPrice);
        }
        if(string.IsNullOrEmpty(Min) && !string.IsNullOrEmpty(Max))
        {
            float.TryParse(Max, out maxPrice);
            Min = "0";
            float.TryParse(Min, out minPrice);
        }
        if (float.TryParse(Min, out minPrice) && float.TryParse(Max, out maxPrice))
        {
            if(minPrice >= 0 && maxPrice == 0)
            {
                Results = ProductsBLL.GetList(item => item.Price >= minPrice && item.Price <= float.MaxValue
                && item.EntryDate >= InitialDate && item.EntryDate <= FinalDate);
            }
            else if(minPrice <= 0 && maxPrice >=0)
            {
                Results = ProductsBLL.GetList(item => item.Price >= 0 && item.Price <= maxPrice
                && item.EntryDate >= InitialDate && item.EntryDate <= FinalDate);
            }
            else
            {
                Results = ProductsBLL.GetList(item => item.Price >= minPrice && item.Price <= maxPrice
                && item.EntryDate >= InitialDate && item.EntryDate <= FinalDate);
            }
        }
        else
        {
            message.Wrong("Se han proporcionado valores no numéricos para trabajar.");
        }
    }
    void SearchByExistence()
    {
        float minValue = 0, maxValue = 0;
        if(!string.IsNullOrEmpty(Min) && string.IsNullOrEmpty(Max))
        {
            float.TryParse(Min, out minValue);
            Max = "0";
            float.TryParse(Max, out maxValue);
        }
        if(string.IsNullOrEmpty(Min) && !string.IsNullOrEmpty(Max))
        {
            float.TryParse(Max, out maxValue);
            Min = "0";
            float.TryParse(Min, out minValue);
        }
        if (float.TryParse(Min, out minValue) && float.TryParse(Max, out maxValue))
        {
            if(minValue >= 0 && maxValue == 0)
            {
                Results = ProductsBLL.GetList(item => item.Existence >= minValue && item.Existence <= float.MaxValue
                && item.EntryDate >= InitialDate && item.EntryDate <= FinalDate);
            }
            else if(minValue <= 0 && maxValue >=0)
            {
                Results = ProductsBLL.GetList(item => item.Existence >= 0 && item.Existence <= maxValue
                && item.EntryDate >= InitialDate && item.EntryDate <= FinalDate);
            }
            else
            {
                Results = ProductsBLL.GetList(item => item.Existence >= minValue && item.Existence <= maxValue
                && item.EntryDate >= InitialDate && item.EntryDate <= FinalDate);
            }
        }
        else
        {
            message.Wrong("Se han proporcionado valores no numéricos para trabajar.");
        }
    }
    bool Validate()
    {
        if(InitialDate > FinalDate)
        {
            message.Wrong("La fehca inicial no puede ser mayor que la fecha límite.");
            return false;
        }
        if(string.IsNullOrEmpty(criterion) && option != 0)
        {
            message.Wrong("Debe colocar un criterio de búsqueda válido.");
            return false;
        }
        else
            return true;
    }
    void ResetDate()
    {
        if(!(InitialDate == GetOldestProduct().EntryDate && FinalDate == GetYoungestProduct().EntryDate))
        {
            InitialDate = GetOldestProduct().EntryDate;
            FinalDate = GetYoungestProduct().EntryDate;
            message.Info("Fecha restaurada", "Se han puesto los valores por defecto de la fecha.");
        }
    }
    Product GetOldestProduct()
    {
        List<Product> productList = ProductsBLL.GetList(item => true);
        Product oldestProduct = productList[0];
        if(productList != null)
        {
            foreach (var item in productList)
            {
                if(oldestProduct.EntryDate > item.EntryDate)
                {
                    oldestProduct = item;
                }
            }
        }
        return oldestProduct;
    }
    Product GetYoungestProduct()
    {
        List<Product> productList = ProductsBLL.GetList(item => true);
        Product youngestProduct = productList[0];
        if(productList != null)
        {
            foreach (var item in productList)
            {
                if(youngestProduct.EntryDate <= item.EntryDate)
                {
                    youngestProduct = item;
                }
            }
        }
        return youngestProduct;
    }
    void RestartFilter()
    {
        if(option != 0)
        {
            option = 0;
            Min = "0";
            Max = "0";
            Filter();
            message.Info("Filtro restablecido", "Se ha restablecido el filtro de búsqueda");
        }
    }
}