@page "/r_clients"
@page "/r_clients/{clientId:int}"
@attribute [Authorize]
@inject ClientBLL ClientBLL
@inject NotificationService notify

<EditForm Model="client" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <div class="container">
        <div class='card'>
            <div class='card-header'>
                <h3>Registro de clientes</h3>
            </div>
            <div class='card-body'>
                <div class='row'>
                    <div class='col-md-6'>
                        <label>ClienteId</label>
                        <div id="search-id">
                            <InputNumber @bind-Value='client.ClientId' class='form-control'></InputNumber>
                            <button type="button" class="btn btn-info oi oi-magnifying-glass" @onclick="Search"></button>
                        </div>
                            <ValidationMessage For="@(() => client.ClientId)" />
                    </div>
                    <div class='col-md-6'>
                        <label>Fecha de ingreso</label>
                        <InputDate @bind-Value='client.RegisterDate' class='form-control'></InputDate>
                        <ValidationMessage For="@(() => client.RegisterDate)" />
                    </div>
                </div> @*End of the row*@
                @* Cedula *@
                <label>Número de identificación</label>
                <InputText @bind-Value='client.IdentificationNumber' class='form-control' placeholder="EJ:05500000001"></InputText>
                <ValidationMessage For="@(() => client.IdentificationNumber)" />
                @* Client Name *@
                <div class='row'>
                    <div class='col-md-6'>
                        <label>Nombre</label>
                        <InputText @bind-Value='client.Name' class='form-control'></InputText>
                        <ValidationMessage For="@(() => client.Name)" />
                    </div>
                    <div class='col-md-6'>
                        <label>Apellido</label>
                        <InputText @bind-Value='client.LastName' class='form-control'></InputText>
                        <ValidationMessage For="@(() => client.LastName)" />
                    </div>
                </div>
                @* Address *@
                <label>Dirección</label>
                <InputText @bind-Value='client.Address' class='form-control'></InputText>
                <ValidationMessage For="@(() => client.Address)" />
                @* Telephone *@
                <div class='row'>
                    <div class='col-md-6'>
                        <label>Teléfono</label>
                        <InputText @bind-Value='client.Telephone' class='form-control' placeholder="EJ:8095008090"></InputText>
                        <ValidationMessage For="@(() => client.Telephone)" />
                    </div>
                    <div class='col-md-6'>
                        <label>Email</label>
                        <InputText @bind-Value='client.Email' class='form-control' placeholder="EJ:usuario@dominio.com"></InputText>
                        <ValidationMessage For="@(() => client.Email)" />
                    </div>
                </div>
                
            </div> @*End of the CARD-BODY*@
            <div class='card-footer'>
                <button type='button' class='btn btn-primary'@onclick='New'><span class="oi oi-plus"/> Nuevo </button>
                <button type='submit' class='btn btn-success'@onclick="Save"><span class="oi oi-check"/> Guardar </button>
                <button type='button' class='btn btn-danger'@onclick='Delete'><span class="oi oi-delete"/> Eliminar </button>
            </div>
        </div>
    </div>
</EditForm>
@code 
{
    [Parameter]
    public int clientId { get; set; }
    public Client client { get; set; } = new Client();
    protected override void OnInitialized()
    {
        if(clientId > 0)
        {
            client.ClientId = clientId;
            Search();
        }
    }
    void Search()
    {
        var clientFound = ClientBLL.Search(client.ClientId);
        if(clientFound != null)
        {
            client = clientFound;
            notify.DataFound();
        }
        else
        {
            notify.NotFound();
        }
    }
    void Save()
    {
        if(!Validate())
        {
            return;
        }
        if(ClientBLL.Save(client))
        {
            notify.Saved();
            New();
        }
        else
        {
            notify.Wrong("No se han podido guardar los datos... intentelo mas tarde.");
        }
    }
    void New()
    {   
        client = new Client();
        notify.ShowNotification("Nuevo", "Un nuevo registro se ha creado y está listo para su uso.", NotificationSeverity.Info);
    }
    void Delete()
    {
        if(ClientBLL.Delete(client))
        {
            New();
            notify.Success("Eliminado", "Se ha eliminado correctamente.");
        }
        else
        {
            notify.Warning("Es necesario que exista un registro previo antes de proceder a su eliminación.");
        }
    }
    bool Validate()
    {
        if(client.ClientId < 0)
        {
            return false;
        }
        if(string.IsNullOrEmpty(client.IdentificationNumber))
        {
            return false;
        }
        if(string.IsNullOrEmpty(client.Name))
        {
            return false;
        }
        if(string.IsNullOrEmpty(client.Address))
        {
            return false;
        }
        if(string.IsNullOrEmpty(client.Telephone))
        {
            return false;
        }
        if(string.IsNullOrEmpty(client.LastName))
        {
            return false;
        }
        if(string.IsNullOrEmpty(client.Email))
        {
            return false;
        }
        else
            return true;
    }
}